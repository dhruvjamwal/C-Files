// searching an element

int search ( int* S , int n , int e ) {
// n is length of the array S
// looking for element e in S
for ( int i =0; i < n ; i ++ ) {
if( S [ i ] == e ) {
return i ;
  }
}
return -1; if file not found
}
--------------------------
// test to compare the performance vector/array

# include < iostream >
# include < vector >
# include " rdtsc .h"
using namespace std ; 
int local_vector ( size_t N ) {
vector <int > bigarray ;     // initially empty vector
// Fill vector upto length N
for ( unsigned int k = 0; k < N ; ++ k )
bigarray . push_back ( k );

// Find the max value in the vector

int max = 0;
for ( unsigned int k = 0; k < N ; ++ k ) {
if( bigarray [ k ] > max )
max = bigarray [ k ];
}
return max ;
}                             
// 3N memory operations

--------------------------
// Weak Pointer usage

# include < iostream >
# include < memory >
class Node {
public :
Node ( int value ) : value ( value ) { std :: cout << " Node " << value << " created ." << std :: endl ; }
// Functions to set/ get the next node / weak ref to previous node / shared ref to previous node
void setNext ( std :: shared_ptr < Node > next ) { nextNode = next ; }
void setWeakPrev ( std :: shared_ptr < Node > next ) { prevWeakNode = next ; }
void setPrev ( std :: shared_ptr < Node > next ) { prevNode = next ; }
std :: shared_ptr < Node > getNext () const { return nextNode ; }
std :: shared_ptr < Node > getPrev () const { return prevNode ; }
std :: shared_ptr < Node > getWeakPrev () const { return prevWeakNode . lock (); }
// Function to display the value of the node
void display () const { std :: cout << " Node value : " << value << std :: endl ; }
private :
int value ;
std :: shared_ptr < Node > nextNode ;
std :: shared_ptr < Node > prevNode ;
std :: weak_ptr < Node > prevWeakNode ;
};
void print_list ( std :: weak_ptr < Node > current ) {
for (int i = 0; i < 5; ++ i) {
auto current_ref = current . lock ();
if ( current_ref ) {
current_ref -> display ();
current = current_ref -> getNext ();
} else {
std :: cout << " Next node is nullptr ." << std :: endl ; break ;
}
}
}

dijkstra algorithm ( dyke stra algo )
time complexity O(n^2) [assuming adjaceny matrix representation]

Quick Sort Algorithm 
time complecity -> O(n)
