-------------BinarySearch--------------
int BinarySearch (int* S , int n , int e ){       //search on well-structured data
// S is a sorted array

int first = 0 , last = n ;
int mid = ( first + last ) / 2;
while ( first < last ) {
if ( S [ mid ] == e ) return mid ;
if ( S [ mid ] > e ) {
last = mid ;
} else {
first = mid + 1;
}
mid = ( first + last ) / 2;
}
return -1;

-------Best/Average/Worst case to run above code--------

int BinarySearch (int* S , int n , int e ){   //let n = 2k−1    

// S is a sorted array

int first = 0 , last = n ;
int mid = ( first + last ) / 2;
while ( first < last ) {
if ( S [ mid ] == e ) return mid ;
if ( S [ mid ] > e ) {
last = mid ;
} else {
first = mid + 1;
}
mid = ( first + last ) / 2;
}
return -1;
//logic In BinarySearch, let n = 2k−1

1. Best case: e == S[n/2]
TRead + 6TArith + Treturn,
2. Worst case:e ∈/ S
we have seen the worst case.
3. Average case: ≈ Worst case
Most often loop will iterate k
times

------------------------------------
// Big-O Notation

In BinarySearch, let n = 2k−1
.
1. Worst case:e ∈/ S
kTRead + (6k + 5)TArith + (3k + 1)Tjump + Treturn ∈ O(k)
Since k = log n + 1, therefore k ∈ O(log n)
Therefore, the worst-case running time of BinarySearch is O(log n).

