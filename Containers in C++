// Containers are abstract data types

# include < iostream >
# include <set >
int main () {
std :: set <int > s ;
for (int i =5; i >=1; i - -)   // s: {50 ,40 ,30 ,20 ,10}
s . insert ( i *10);
s . insert (20); // no new element inserted
s . erase (20); // s: {50 ,40 ,30 ,10}
if( s . contains (40) )
std :: cout << "s has 40!\ n";
for ( int i : s ) // printing elements of a container
std :: cout << i << ’\n’;
return 0;

//C++ Sequential Container (vector)

#include <iostream>
#include <vector>
using namespace std;

int main() {

  // initialize a vector of int type
  vector<int> numbers = {1, 100, 10, 70, 100};

  // print the vector
  cout << "Numbers are: ";
  for(auto &num: numbers) {
    cout << num << ", ";
  }

  return 0;
}

------//
Let us create a test to compare the performance 
------// assumes the 64 - bit machine

int main () {
ClockCounter t ; // counts elapsed cycles
size_t MN = 4*32*32*32*32*16;
size_t N = 4;
while ( N <= MN ) {
t . start ();
test_local_vector ( MN / N , N );
double diff = t . stop ();
// print average time for 3 memory operations
std :: cout << "N = " << N << " : " << ( diff / MN );
N = N *32;}
}
// containers are abstract data type
map<T,T> Source: 
# include < iostream >
# include < string >
# include <map >
int main () {
std :: map < std :: string ,int > cart ;
// Set some initial values :
cart [" soap "] = 2;
cart [" salt "] = 1;
cart . insert ( std :: make_pair ( "pen ", 10 ) );
cart . erase (" salt ");
// access elements
std :: cout << " Soap : " << cart [" soap "] << "\n";
std :: cout << "Hat: " << cart ["hat"] << "\n";
std :: cout << "Hat: " << cart . at ("hat") << "\n";
}


