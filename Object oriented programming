//Pointers to structures

void expand2(circle*c,double factor)(
(*c).r = (*c).r * factor;
)

//Representing 3 dimension vector

struct v3{
double x,y,z;
};

//Operator overloading

*infix operator
v3 operator+ (v3 a, v3 b){

// temp {
#include <iostream>
using namespace std;
class vector{
private:
    int x;
    int y;
public:
    vector();
    vector(int c, int d);
    void set(int x1, int y1)
    { x = x1; y=y1;}
    int squarenorm();
    void print();
    void print(int z);
    
    vector operator + (vector v);
    int operator * (vector v);
    void operator ++();
    void operator ++(int);
    
};



void vector::operator ++(){
    x++;
    y++;
    
    
}

 void vector::operator ++(int){
     x++;
     y++;
 }
 
 int vector::operator * (vector v) {
     return (x*v.x + y*v.y);
     
 }
 vector vector::operator + (vector v) {
     vector v2;
     v2.set(x+v.x, y + v.y);
     return v2;
 }
 int vector::squarenorm(){
     return (x*x + y*y);
 }
 void vector::print(int z){
     x = z*x;
     y = z*y;
     cout<<x<<y;
 }
  void vector::print(){
      int nm = squarenorm();
      cout<<x<<y;
      
  }
 int main()
 {
     vector u(7,7);
     vector z(9,9);
      
    vector v = u + z;
    
    v.print();
     
    int y =u*z;
    cout<<"dot product of u and z is:"<<y;
    ++u;
    u.print();
     z++;
     z.print();
     
}

}// temp
return make_v3(a.x+b.x, a.y+b.y, +a.z+b.z)}

//Template Class

template<T>
class v3
{ 
private: t,x,y,z
public: V3(T p=0, T q=0, T r=0){ x = p; y = q; z = r;}
V3 operator+(V3 w);
}
template<T>
V3 V3::operator+(V3 w){ return V3(x+w.x, y+w.y, z+w.z); }
// To implement friend class
// To use constructor
// Types of inheritance
// Types of polymorphism
// To perform operator overloading
// Using inline functions

// To implement friend class

#include <iostream>
using namespace std;
class myclass{
    int data_;
public:
    myclass(int i) : data_(i) {}
    friend void display(const myclass& a);
};
void display(const myclass& a){
    cout<<"data ="<< a.data_;
    
} 
int main()
{
    myclass obj(7);
    display(obj);
}

// constructor and destructor member function

// Polymorphism

// Templates
